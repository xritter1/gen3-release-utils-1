#!/bin/bash

if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ $# -eq 0 ]; then
  echo "------------------------------------------------------------------------------"
  echo "Usage - config-diff [-(-m)anifest] [-(-p)ortal] <[repo/]namespace[:branch]> <[repo/]namespace[:branch]>"
  echo "e.g., config-diff --manifest gen3.datastage.io:stable gitops-qa/qa-datastage.planx-pla.net"
  echo ""
  echo "This script diffs the configurations of two or more gen3 commons."
  echo "By default, the script will diff the commons' main configuration (manifest.json) and then its portal configuration (gitops.json)."
  echo "To diff only manifest.json, pass the -(-m)anifest flag. Likewise with the -(-portal) flag."
  echo ""
  echo "NOTE: Requires jq https://stedolan.github.io/jq/ and vimdiff"
  echo ""
  echo "If 'repo' is not specified, it is assumed to be 'cdis-manifest'."
  echo "If 'branch' is not specified, it is assumed to be 'master'"
  echo "-------------------------------------------------------------------------------"
  exit 0;
fi;

github_url_base="https://raw.githubusercontent.com/uc-cdis"
default_branch="master"
default_repo="cdis-manifest"
manifest_path="manifest.json"
portal_config_path="portal/gitops.json"

diff_manifest=false
diff_portal=false

declare -a urls
declare -a namespaces
declare -a branches

# Iterate over arguments
while test ${#} -gt 0
do
  case $1 in
    -p|--portal)
      diff_portal=true
      ;;
    -m|--manifest)
      diff_manifest=true
      ;;
    -mp)
      diff_manifest=true
      diff_portal=true
      ;;
    *)
      # Assume $1 is a commons, in the format: [repo/]namespace[:branch]

      # Parse the repo name, if any
      # Test for presence of a slash (/) in the part of the string before the colon, if any.
      if [[ $1 =~ ^[^:]*/.*$ ]]
        then
          # If there is a slash before a colon, everything before the slash is the repo name.
          repo=$(echo $1 | sed 's/^\([^:]*\)\/.*$/\1/')
          repo_specified=true
        else
          repo=$default_repo
      fi

      # Parse the branch name, if any
      # Test for presence of a colon(':') in the string
      if [[ $1 == *:* ]]
        then
          # If there is a colon, everything after the colon is the branch name
          branch=$(echo $1 | sed 's/.*:\(.*\)$/\1/')
          # Replace leading underscore with forward slash('/'), in case anyone tries to use
          # the quay branch syntax (e.g. feat_newfeature instead of feat/newfeature)
          branch=$(echo $branch | sed 's/_/\//' )
          branch_specified=true
        else
          branch=$default_branch
      fi

      # Parse commons namespace
      namespace=$1
      # If the repo was specified, remove the repo name from the front of the argument
      if $repo_specified
        then
          namespace=$(echo $namespace | sed "s/$repo\/\(.*\)/\1/")
      fi
      # Remove the branch name if present
      namespace=$(echo $namespace | sed 's/^\([^:]*\):?.*$/\1/')

      urls+=("$github_url_base/$repo/$branch/$namespace")
      namespaces+=("$namespace")
      branches+=("$branch")
      ;;
  esac
  shift
done

# If the user didn't pass the -(-m)anifest or the -(-p)ortal flag,
# diff just the manifest.
if ! $diff_manifest && ! $diff_portal
  then
    diff_manifest=true
fi

if $diff_manifest
  then
    manifest_a_url="${urls[0]}/$manifest_path"
    echo "Fetching manifest from $manifest_a_url..."
    manifest_a_raw=$(curl -sf $manifest_a_url)
    manifest_a_formatted=$(echo "$manifest_a_raw" | jq -S '.' | jq '{versions} + .')

    manifest_b_url="${urls[1]}/$manifest_path"
    echo "Fetching manifest from $manifest_b_url..."
    manifest_b_raw=$(curl -sf $manifest_b_url)
    manifest_b_formatted=$(echo "$manifest_b_raw" | jq -S '.' | jq '{versions} + .')

    # read manifests into temporary files
    namespace_a="${namespaces[0]}"
    namespace_b="${namespaces[1]}"
    branch_a="${branches[0]}"
    branch_b="${branches[1]}"
    manifest_a_file=$(mktemp "/tmp/$namespace_a:$manifest_path@$branch_a")
    manifest_b_file=$(mktemp "/tmp/$namespace_b:$manifest_path@$branch_b")
    echo "$manifest_a_formatted" >> $manifest_a_file
    echo "$manifest_b_formatted" >> $manifest_b_file

    # run diff
    vimdiff $manifest_a_file $manifest_b_file

    # delete the temporary files
    rm "$manifest_a_file"
    rm "$manifest_b_file"
fi

if $diff_portal
  then
    portal_a_url="${urls[0]}/$portal_config_path"
    echo "Fetching portal config from $portal_a_url..."
    portal_a_raw=$(curl -sf $portal_a_url)
    portal_a_formatted=$(echo "$portal_a_raw" | jq -S '.')

    portal_b_url="${urls[1]}/$portal_config_path"
    echo "Fetching portal config from $portal_b_url..."
    portal_b_raw=$(curl -sf $portal_b_url)
    portal_b_formatted=$(echo "$portal_b_raw" | jq -S '.')

    # read portal configs into temporary files
    namespace_a="${namespaces[0]}"
    namespace_b="${namespaces[1]}"
    branch_a="${branches[0]}"
    branch_b="${branches[1]}"
    portal_config_path="portal_gitops.json"
    portal_a_file=$(mktemp "/tmp/$namespace_a:$portal_config_path@$branch_a")
    portal_b_file=$(mktemp "/tmp/$namespace_b:$portal_config_path@$branch_b")
    echo "$portal_a_formatted" >> $portal_a_file
    echo "$portal_b_formatted" >> $portal_b_file

    # run diff
    vimdiff $portal_a_file $portal_b_file

    # delete the temporary files
    rm "$portal_a_file"
    rm "$portal_b_file"
fi

echo "done"
